package test;import com.trilead.ssh2.StreamGobbler;import hudson.model.BuildListener;import hudson.model.Executor;import org.apache.commons.io.FileUtils;import org.apache.commons.io.IOUtils;import org.apache.tools.ant.taskdefs.Exec;import org.omg.SendingContext.RunTime;import java.awt.*;import java.io.*;import java.net.URL;import java.nio.file.Path;import java.nio.file.Paths;import java.util.ArrayList;import java.util.List;import java.util.concurrent.Executors;import java.util.zip.ZipEntry;import java.util.zip.ZipInputStream;public class TestDownload {    private static File downloadAndExtract(String link, File targetDir) throws IOException{        String nameKatalonFolder = getNameKatalonFoler(link);        URL url = new URL(link);        url.openStream();        InputStream in = new BufferedInputStream(url.openStream(), 1024);        ZipInputStream zIn = new ZipInputStream(in);        return unpackArchive(zIn, targetDir, nameKatalonFolder);    }    public static File unpackArchive(ZipInputStream inputStream, File targetDir, String nameKatalonFolder) throws IOException{        ZipEntry entry;        while((entry = inputStream.getNextEntry()) != null){            //File file = new File(targetDir, File.separator + entry.getName());            String folder = entry.getName().replace(nameKatalonFolder, "");            File file = new File(targetDir, File.separator + folder);            if(!buildDirectory(file.getParentFile())){                throw new IOException("Could not create directory: " + file.getParentFile());            }            if(!entry.isDirectory()){                copyInputStream(inputStream, new BufferedOutputStream(new FileOutputStream(file)));            } else{                if(!buildDirectory(file))                {                    throw new IOException("Could not create directory" + file);                }            }        }        return targetDir;    }    public static void copyInputStream(InputStream in, OutputStream out) throws IOException{        IOUtils.copy(in, out);        out.close();    }    private static File getKatalonFolder(){        //Get user home, but failed. path = "C:\\windows\\system32\\config\\systemprofile\\.katalon\\5.8.0";        String path = System.getProperty("user.home");        //String path = "C:\\Users\\tuananhtran";        Path p = Paths.get(path,".katalon", "5.8.0");        return p.toFile();    }    public static boolean buildDirectory(File file)    {        return file.exists() || file.mkdirs();    }    private static String getNameKatalonFoler(String link){        int lastIndexof = link.lastIndexOf("/");        int endNameFolder = link.lastIndexOf(".zip");        return link.substring(lastIndexof + 1, endNameFolder );    }    private static List convertCommandToList(String execute)    {        List<String> myList = new ArrayList();        execute = execute.replace("  ", " ");        int index;        while((index = execute.indexOf(" -")) > 0){            myList.add(execute.substring(0, index));            execute = execute.substring(index + 1);        }        myList.add(execute);        return myList;    }    private static String runExcutebyCmd(String katalonExecuteDir, String execute) throws IOException, InterruptedException {        StringBuffer output = new StringBuffer();        String configExecute = katalonExecuteDir + " " +execute;        boolean isWindows = System.getProperty("os.name").toLowerCase().startsWith("windows");        Process cmdProc;        if (isWindows){            cmdProc = Runtime.getRuntime().exec("cmd /c" + configExecute);        } else{            cmdProc = Runtime.getRuntime().exec("sh -c " + configExecute);        }        InputStreamReader in = new InputStreamReader(cmdProc.getInputStream());        BufferedReader reader = new BufferedReader(in);        String line;        System.out.println("abc");        while ((line = reader.readLine()) != null){            System.out.println(line);            output.append(line + "\n");        }        cmdProc.destroy();        reader.close();        return output.toString();    }    public static void main(String[] args) throws IOException {        String link = "https://download.katalon.com/5.8.0/Katalon_Studio_Windows_64-5.8.0.zip";        //String link = "https://download.katalon.com/" + this.version + "/Katalon_Studio_Windows_64-" + this.version + ".zip";        File katalonDir = getKatalonFolder();        try {            Path fileLog = Paths.get(katalonDir.toString(), ".katalon.done");            if(fileLog.toFile().exists()){                System.out.println("Load Katalon done!");            } else            {                FileUtils.deleteDirectory(katalonDir);                katalonDir.mkdirs();                downloadAndExtract(link, katalonDir);                fileLog.toFile().createNewFile();            }            String katalonExecuteDir = Paths.get(katalonDir.toString(), "katalon").toString();//            String str = "-noSplash" +//                    "  -runMode=console" +////                    " -consoleLog" +//                    " -projectPath=\"D:\\KatalonSample.prj\\Jira UI Tests with Katalon Studio.prj\"" +//                    " -statusDelay=5 -retry=0" +//                    " -testSuitePath=\"Test Suites/Simple Examples/Login test suite with data-driven-approach\"" +//                    " -executionProfile=\"default\"" +//                    " -browserType=\"Chrome\"";            String str = "katalon -noSplash" +                    "  -runMode=console" +//                    " -consoleLog" +                    " -projectPath=\"D:\\Katalon\\TestProject\\TestProject.prj\"" +                    " -statusDelay=5" +                    " -retry=0" +                    " -testSuitePath=\"Test Suites/New Test Suite\"" +                    " -executionProfile=\"default\"" +                    " -browserType=\"Chrome\"";//            List<String> myList = new ArrayList();////            myList.add(str);////            List lsExcute = convertCommandToList(str);//            lsExcute.add(0, katalonExecuteDir);////            System.out.println(lsExcute);////            Process p = new ProcessBuilder(lsExcute).start();            System.out.println(runExcutebyCmd(katalonExecuteDir, str));        } catch (Exception e) {            e.printStackTrace();        }    }}