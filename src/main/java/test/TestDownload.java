package test;import org.apache.commons.io.FileUtils;import org.apache.commons.io.IOUtils;import java.awt.*;import java.io.*;import java.net.URL;import java.nio.file.Path;import java.nio.file.Paths;import java.util.ArrayList;import java.util.zip.ZipEntry;import java.util.zip.ZipInputStream;public class TestDownload {    private static File downloadAndExtract(String link, File targetDir) throws IOException{        String nameKatalonFolder = getNameKatalonFoler(link);        URL url = new URL(link);        url.openStream();        InputStream in = new BufferedInputStream(url.openStream(), 1024);        ZipInputStream zIn = new ZipInputStream(in);        return unpackArchive(zIn, targetDir, nameKatalonFolder);    }    public static File unpackArchive(ZipInputStream inputStream, File targetDir, String nameKatalonFolder) throws IOException{        ZipEntry entry;        while((entry = inputStream.getNextEntry()) != null){            //File file = new File(targetDir, File.separator + entry.getName());            String folder = entry.getName().replace(nameKatalonFolder, "");            File file = new File(targetDir, File.separator + folder);            if(!buildDirectory(file.getParentFile())){                throw new IOException("Could not create directory: " + file.getParentFile());            }            if(!entry.isDirectory()){                copyInputStream(inputStream, new BufferedOutputStream(new FileOutputStream(file)));            } else{                if(!buildDirectory(file))                {                    throw new IOException("Could not create directory" + file);                }            }        }        return targetDir;    }    public static void copyInputStream(InputStream in, OutputStream out) throws IOException{        IOUtils.copy(in, out);        out.close();    }    private static File getKatalonFolder(){        //Get user home, but failed. path = "C:\\windows\\system32\\config\\systemprofile\\.katalon\\5.8.0";        String path = System.getProperty("user.home");        //String path = "C:\\Users\\tuananhtran";        Path p = Paths.get(path,".katalon", "5.8.0");        return p.toFile();    }    public static boolean buildDirectory(File file)    {        return file.exists() || file.mkdirs();    }    private static String getNameKatalonFoler(String link){        int lastIndexof = link.lastIndexOf("/");        int endNameFolder = link.lastIndexOf(".zip");        return link.substring(lastIndexof + 1, endNameFolder );    }    private static void runFileExcute(File file) throws IOException {        Desktop desktop = Desktop.getDesktop();        desktop.open(file);    }    public static void main(String []args) throws IOException {        String link = "https://download.katalon.com/5.8.0/Katalon_Studio_Windows_64-5.8.0.zip";        //String link = "https://download.katalon.com/" + this.version + "/Katalon_Studio_Windows_64-" + this.version + ".zip";        File katalonDir = getKatalonFolder();        try {            Path fileLog = Paths.get(katalonDir.toString(), ".katalon.done");            if(fileLog.toFile().exists()){                System.out.println("Exists");            } else            {                FileUtils.deleteDirectory(katalonDir);                katalonDir.mkdirs();                downloadAndExtract(link, katalonDir);                fileLog.toFile().createNewFile();            }            String katalonExecuteDir = Paths.get(katalonDir.toString(), "katalon").toString();            Process cmdProc = Runtime.getRuntime().exec( katalonExecuteDir + "-noSplash  -runMode=console -consoleLog -projectPath=\"D:\\test2.prj\\Data-driven Tests with Katalon Studio.prj\" -retry=0 -testSuitePath=\"Test Suites/Simple Examples/Login test suite with test data from internal files\" -executionProfile=\"default\" -browserType=\"Chrome\" -noExit");            BufferedReader stdoutReader = new BufferedReader(                    new InputStreamReader(cmdProc.getInputStream()));            String line;            while ((line = stdoutReader.readLine()) != null) {                System.out.println(line);            }        } catch (Exception e) {            e.printStackTrace();        }    }}